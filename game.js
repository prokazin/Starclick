// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const GameState = {
  credits: 0,
  clickPower: 1,
  faction: null,
  lastPlayed: Date.now(),
  units: {
    stormtrooper: { price: 15, income: 0.3, owned: 0, emoji: "ü™ñ" },
    droid: { price: 50, income: 1, owned: 0, emoji: "ü§ñ" },
    xwing: { price: 200, income: 5, owned: 0, emoji: "‚úàÔ∏è" },
    tieFighter: { price: 200, income: 5, owned: 0, emoji: "üöÄ" }
  },
  bosses: [
    { name: "–î–∞—Ä—Ç –ú–æ–ª", hp: 500, reward: 200, emoji: "‚öîÔ∏è" },
    { name: "–õ—é–∫ –°–∫–∞–π—É–æ–∫–µ—Ä", hp: 800, reward: 400, emoji: "üîÆ" }
  ],
  currentBoss: null
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
  screens: {
    main: document.getElementById('main-menu'),
    faction: document.getElementById('faction-screen'),
    game: document.getElementById('game-screen'),
    shop: document.getElementById('shop-screen'),
    boss: document.getElementById('boss-screen'),
    leaderboard: document.getElementById('leaderboard-screen')
  },
  buttons: {
    newGame: document.getElementById('new-game-btn'),
    lightSide: document.getElementById('light-side'),
    darkSide: document.getElementById('dark-side'),
    click: document.getElementById('click-btn'),
    shop: document.getElementById('shop-btn'),
    attackBoss: document.getElementById('attack-boss-btn')
  },
  displays: {
    credits: document.getElementById('credits-display'),
    offline: document.getElementById('offline-credits'),
    units: document.getElementById('units-list'),
    leaderboard: document.getElementById('leaderboard-list'),
    bossHp: document.getElementById('boss-hp-bar'),
    bossTitle: document.getElementById('boss-title')
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  loadGame();
  setupEventListeners();
  renderUnits();
  startGameLoop();
  checkOfflineProgress();
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function startGameLoop() {
  setInterval(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥
    const income = calculateIncome();
    GameState.credits += income;
    
    // –°–ø–∞–≤–Ω –±–æ—Å—Å–∞
    if (!GameState.currentBoss && Math.random() < 0.01) {
      spawnBoss();
    }
    
    updateUI();
    saveGame();
  }, 1000);
}

// –ü–æ–∫—É–ø–∫–∞ —é–Ω–∏—Ç–∞
function buyUnit(unitType) {
  const unit = GameState.units[unitType];
  if (GameState.credits >= unit.price) {
    GameState.credits -= unit.price;
    unit.owned++;
    unit.price = Math.floor(unit.price * 1.15);
    updateUI();
    saveGame();
  } else {
    alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CR!");
  }
}

// ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∞—Ç–∞–∫–∞ –±–æ—Å—Å–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Ç.–¥.)

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
window.onload = initGame;
